# Import necessary libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from statsmodels.tsa.arima.model import ARIMA
from statsmodels.graphics.tsaplots import plot_acf, plot_pacf
from statsmodels.tsa.stattools import adfuller
from statsmodels.stats.diagnostic import acorr_ljungbox

# Generate synthetic time series data
np.random.seed(42)
n = 200
time = np.arange(n)
values = np.sin(0.1 * time) + np.random.normal(0, 0.5, n)  # Seasonal + noise
data = pd.Series(values, name="Value")

# Convert data to time series format
data.index = pd.date_range(start="2022-01-01", periods=n, freq="D")

# Plot the time series
plt.figure(figsize=(10, 4))
plt.plot(data, label="Time Series Data")
plt.title("Time Series Data")
plt.xlabel("Time")
plt.ylabel("Value")
plt.legend()
plt.show()

# Step 1: Exploratory Data Analysis
# Plot ACF and PACF
plot_acf(data, lags=30, title="Autocorrelation (ACF)")
plt.show()

plot_pacf(data, lags=30, title="Partial Autocorrelation (PACF)")
plt.show()

# Check stationarity using Augmented Dickey-Fuller test
def adf_test(series):
    result = adfuller(series)
    print("ADF Test Results:")
    print(f"ADF Statistic: {result[0]:.4f}")
    print(f"p-value: {result[1]:.4f}")
    if result[1] <= 0.05:
        print("\nThe series is stationary (p-value <= 0.05).")
    else:
        print("\nThe series is non-stationary (p-value > 0.05).")

adf_test(data)

# If non-stationary, apply differencing
if adfuller(data)[1] > 0.05:
    data_diff = data.diff().dropna()
    print("\nDifferencing applied to make the series stationary.")
    plt.figure(figsize=(10, 4))
    plt.plot(data_diff, label="Differenced Data")
    plt.title("Differenced Time Series")
    plt.xlabel("Time")
    plt.ylabel("Value")
    plt.legend()
    plt.show()

    # Re-check stationarity
    adf_test(data_diff)
else:
    data_diff = data

# Step 2: Fit the ARIMA model
# Specify ARIMA(p, d, q) order manually or use ACF/PACF to estimate
p, d, q = 1, 1, 1  # Example parameters
model = ARIMA(data, order=(p, d, q))
fitted_model = model.fit()

# Display model summary
print(fitted_model.summary())

# Step 3: Diagnostics
# Residual diagnostics
residuals = fitted_model.resid
plt.figure(figsize=(10, 4))
plt.plot(residuals, label="Residuals")
plt.axhline(0, linestyle="--", color="red")
plt.title("Residuals of ARIMA Model")
plt.xlabel("Time")
plt.ylabel("Residuals")
plt.legend()
plt.show()

# ACF of residuals
plot_acf(residuals, lags=30, title="Residuals ACF")
plt.show()

# Ljung-Box test
ljung_box = acorr_ljungbox(residuals, lags=[10], return_df=True)
print("\nLjung-Box Test Results:")
print(ljung_box)

# Check if residuals are white noise
if all(ljung_box["lb_pvalue"] > 0.05):
    print("Residuals are white noise (p-value > 0.05).")
else:
    print("Residuals show patterns (p-value <= 0.05). Consider refining the model.")

# Step 4: Forecasting
forecast = fitted_model.get_forecast(steps=30)
forecast_index = pd.date_range(start=data.index[-1] + pd.Timedelta(days=1), periods=30, freq="D")
forecast_mean = forecast.predicted_mean
forecast_ci = forecast.conf_int()

# Plot forecasts
plt.figure(figsize=(10, 6))
plt.plot(data, label="Historical Data")
plt.plot(forecast_index, forecast_mean, label="Forecast", color="orange")
plt.fill_between(forecast_index, forecast_ci.iloc[:, 0], forecast_ci.iloc[:, 1], color="orange", alpha=0.2)
plt.title("Forecast with ARIMA Model")
plt.xlabel("Time")
plt.ylabel("Value")
plt.legend()
plt.show()
