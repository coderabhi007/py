import pandas as pd
import numpy as np
from statsmodels.tsa.seasonal import seasonal_decompose
from statsmodels.tsa.statespace.sarimax import SARIMAX
from statsmodels.graphics.tsaplots import plot_acf, plot_pacf
import matplotlib.pyplot as plt
from sklearn.metrics import mean_squared_error
import warnings
warnings.filterwarnings('ignore')

# Load dataset (example dataset with a datetime index and a 'value' column)
# Replace this with your actual time-series data
data = pd.read_csv('your_dataset.csv', parse_dates=['date'], index_col='date')

# Visualize the dataset
data.plot(title='Time Series Data', figsize=(10, 6))
plt.show()

# Seasonal decomposition of time series
decomposition = seasonal_decompose(data['value'], model='additive')
decomposition.plot()
plt.show()

# Step 1: Check Stationarity
from statsmodels.tsa.stattools import adfuller

def check_stationarity(series):
    result = adfuller(series)
    print(f"ADF Statistic: {result[0]}")
    print(f"p-value: {result[1]}")
    print(f"Critical Values: {result[4]}")
    if result[1] <= 0.05:
        print("The series is stationary.")
    else:
        print("The series is not stationary. Differencing might be needed.")

check_stationarity(data['value'])

# Step 2: Differencing to achieve stationarity (if necessary)
data_diff = data['value'].diff(1).dropna()
check_stationarity(data_diff)

# Step 3: Seasonal differencing (if necessary)
data_seasonal_diff = data_diff.diff(12).dropna()
check_stationarity(data_seasonal_diff)

# Step 4: ACF and PACF plots for parameter estimation
plot_acf(data_seasonal_diff, lags=30)
plot_pacf(data_seasonal_diff, lags=30)
plt.show()

# Step 5: Fit SARIMA Model
p, d, q = 1, 1, 1  # Non-seasonal parameters (adjust based on ACF/PACF)
P, D, Q, m = 1, 1, 1, 12  # Seasonal parameters (adjust based on seasonality)

model = SARIMAX(data['value'], 
                order=(p, d, q), 
                seasonal_order=(P, D, Q, m), 
                enforce_stationarity=False, 
                enforce_invertibility=False)
results = model.fit()

# Print model summary
print(results.summary())

# Step 6: Analyze residuals
residuals = results.resid
plt.figure(figsize=(10, 6))
plt.plot(residuals, label='Residuals')
plt.title('Residuals of SARIMA Model')
plt.legend()
plt.show()

# ACF plot of residuals
plot_acf(residuals, lags=30)
plt.show()

# Step 7: Forecast
forecast = results.get_forecast(steps=12)
forecast_index = pd.date_range(start=data.index[-1], periods=12, freq='M')
forecast_values = forecast.predicted_mean
forecast_ci = forecast.conf_int()

plt.figure(figsize=(10, 6))
plt.plot(data, label='Original Data')
plt.plot(forecast_index, forecast_values, label='Forecast', color='red')
plt.fill_between(forecast_index, forecast_ci.iloc[:, 0], forecast_ci.iloc[:, 1], color='pink', alpha=0.2)
plt.title('SARIMA Forecast')
plt.legend()
plt.show()

# Evaluate model
test_data = data['value'][-12:]  # Assuming the last 12 months are for testing
forecast_values_test = forecast_values[:len(test_data)]
rmse = np.sqrt(mean_squared_error(test_data, forecast_values_test))
print(f"Root Mean Squared Error (RMSE): {rmse}")
