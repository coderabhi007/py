# Import necessary libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from statsmodels.tsa.arima_model import ARMA
from statsmodels.graphics.tsaplots import plot_acf, plot_pacf
from sklearn.metrics import mean_squared_error

# Generate synthetic time-series data
np.random.seed(42)
n = 200
time = np.arange(n)
values = np.sin(0.1 * time) + np.random.normal(0, 0.5, n)
data = pd.Series(values, name="Value")

# Plot the time-series data
plt.figure(figsize=(10, 4))
plt.plot(data, label="Time Series Data")
plt.title("Time Series Data")
plt.xlabel("Time")
plt.ylabel("Value")
plt.legend()
plt.show()

# Split data into train and test (80:20 split)
split = len(data) - int(0.2 * len(data))
train, test = data[:split], data[split:]

# Step 1: Auto-Correlation Plot (ACP) to determine p
plot_acf(train, lags=50)
plt.title("Auto-Correlation Plot (ACP)")
plt.show()

# Step 2: Partial Auto-Correlation Plot (PACP) to determine q
plot_pacf(train, lags=50)
plt.title("Partial Auto-Correlation Plot (PACP)")
plt.show()

# Step 3: Auto-Regression Model (AR)
p = 3  # Chosen based on ACP
ar_model = ARMA(train, order=(p, 0))  # AR(p)
ar_fit = ar_model.fit(disp=False)
print("AR Model Summary:")
print(ar_fit.summary())

# Forecast using AR model
ar_forecast = ar_fit.forecast(steps=len(test))[0]

# Evaluate AR model
ar_mse = mean_squared_error(test, ar_forecast)
print(f"AR Model Mean Squared Error: {ar_mse:.4f}")

# Plot AR model forecast
plt.figure(figsize=(10, 4))
plt.plot(train, label="Train Data")
plt.plot(test, label="Test Data")
plt.plot(test.index, ar_forecast, label="AR Forecast", linestyle="dashed", color="orange")
plt.title("AR Model Forecast")
plt.xlabel("Time")
plt.ylabel("Value")
plt.legend()
plt.show()

# Step 4: Moving Average Model (MA)
q = 2  # Chosen based on PACP
ma_model = ARMA(train, order=(0, q))  # MA(q)
ma_fit = ma_model.fit(disp=False)
print("MA Model Summary:")
print(ma_fit.summary())

# Forecast using MA model
ma_forecast = ma_fit.forecast(steps=len(test))[0]

# Evaluate MA model
ma_mse = mean_squared_error(test, ma_forecast)
print(f"MA Model Mean Squared Error: {ma_mse:.4f}")

# Plot MA model forecast
plt.figure(figsize=(10, 4))
plt.plot(train, label="Train Data")
plt.plot(test, label="Test Data")
plt.plot(test.index, ma_forecast, label="MA Forecast", linestyle="dashed", color="green")
plt.title("MA Model Forecast")
plt.xlabel("Time")
plt.ylabel("Value")
plt.legend()
plt.show()
